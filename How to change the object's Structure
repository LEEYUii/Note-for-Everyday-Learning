we can use the "reduce()" method to change an object's structure.

But how and why?

the "reduce()" method's definition:

"reduce()" method can reduce an array to a single value (to calculate the single value of an array). also, it executes a provided function for each value of the array (from left to right). The return value of the function is stored in an accumulator.

Attention, the "reduce()" method only access the array with values! and it won't change the original values.


--------------------------------------------


The syntax of the "reduce()" method:

arrayname.reduce(function(total[this is required], currentValue[it's required], currentIndex[optional], arr[optional]),initialValue[optional]);

What will returned by the "reduce()" method? it will return the accumulated result from the last call of the callback function;

("reduce()" means from left to right; "reduceRight()" means from right to left;)

So we can know that: a "reducer" will only return one value and one value only hence the name reduce. No matter how complicated an array is.


--------------------------------------------


Example:

I. Flattening an Array Using Reduce

const numArray = [1, 2, [3, 10, [11, 12]], [1, 2, [3, 4]], 5, 6];

But we can use the reduce() method to flatten this array:

function flattenArray(data) {

const initialValue = [];

// our initial value is a blank array;

// call reduce on our data

return data.reduce( (total, value) => { return total.concat(Array.isArray(value) ? flattenArray(value) : value)}, initialValue); }

  // if the value is an array then recursively call reduce;
  // if the value is not an array then just concat our value;


--------------------------------------------


II. Changing an Object Structure

So with the new Pokemon game coming out, letâ€™s pretend we have a server that sends us an array of Pokemon objects like so:

const pokemon = [ { name: "charmander", type: "fire" }, { name: "squirtle", type: "water" }, { name: "bulbasaur", type: "grass" } ]

// three objects combined an array;

Answer:

const getMapFromArray = data => data.reduce((acc, item) => { acc[item.name] = { type: item.type }; return acc; }, {});

getMapFromArray(pokemon)

we will get:

const pokemonModified = { charmander: { type: "fire" }, squirtle: { type: "water" }, bulbasaur: { type: "grass" } };
