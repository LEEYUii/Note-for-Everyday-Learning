Maths:

let x = 1;

x = -x;
alert( x ); // -1, unary negation was applied

---------------------------

let x = 1, y = 3;
alert( y - x ); // 2, binary minus subtracts values

---------------------------

alert( 5 % 2 ); // 1, a remainder of 5 divided by 2
alert( 8 % 3 ); // 2, a remainder of 8 divided by 3

---------------------------

alert( 2 ** 2 ); // 2² = 4
alert( 2 ** 3 ); // 2³ = 8
alert( 2 ** 4 ); // 2⁴ = 16

method 2:

alert ( Math.pow(2, 2) ); // 2² = 4
alert ( Math.pow(2, 3) ); // 2³ = 8
alert ( Math.pow(2, 4) ); // 2⁴ = 16

---------------------------

alert( 4 ** (1/2) ); // 2 (power of 1/2 is the same as a square root)
alert( 8 ** (1/3) ); // 2 (power of 1/3 is the same as a cubic root)

---------------------------

String concatenation with binary +:

let s = "my" + "string";
alert(s); // mystring

---------------------------

alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"

---------------------------

alert(2 + 2 + '1' ); // "41" and not "221"

---------------------------

alert('1' + 2 + 2); // "122" and not "14"

---------------------------

The binary + is the only operator that supports strings in such a way. Other arithmetic operators work only with numbers and always convert their operands to numbers:

alert( 6 - '2' ); // 4, converts '2' to a number
alert( '6' / '2' ); // 3, converts both operands to numbers

---------------------------

Numeric conversion, unary + :

// No effect on numbers
let x = 1;
alert( +x ); // 1

let y = -2;
alert( +y ); // -2

// Converts non-numbers
alert( +true ); // 1
alert( +"" );   // 0

---------------------------

let apples = "2";
let oranges = "3";

alert( apples + oranges ); // "23", the binary plus concatenates strings

---------------------------

unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up:

let apples = "2";
let oranges = "3";

// both values converted to numbers before the binary plus
alert( +apples + +oranges ); // 5

// the longer variant
// alert( Number(apples) + Number(oranges) ); // 5

---------------------------

let a = 1;
let b = 2;

let c = 3 - (a = b + 1);

alert( a ); // 3
alert( c ); // 0

---------------------------

let a, b, c;

a = b = c = 2 + 2;

alert( a ); // 4
alert( b ); // 4
alert( c ); // 4

---------------------------

Increment/decrement:
Important: Increment/decrement can only be applied to variables.

Increment ++ increases a variable by 1:

let counter = 2;
counter++;        // works the same as counter = counter + 1, but is shorter
alert( counter ); // 3

---------------------------

Decrement -- decreases a variable by 1:

let counter = 2;
counter--;        // works the same as counter = counter - 1, but is shorter
alert( counter ); // 1

---------------------------

The operators ++ and -- can be placed either before or after a variable.

When the operator goes after the variable, it is in “postfix form”: counter++.
The “prefix form” is when the operator goes before the variable: ++counter.

let counter = 1;
let a = ++counter; // (*)
alert(a); // 2

let counter = 1;
let a = counter++; // (*) changed ++counter to counter++
alert(a); // 1

---------------------------

If the result of increment/decrement is not used, there is no difference in which form to use:

let counter = 0;
counter++;
++counter;
alert( counter ); // 2, the lines above did the same

---------------------------

If we’d like to increase a value and immediately use the result of the operator, we need the prefix form:

let counter = 0;
alert( ++counter ); // 1

If we’d like to increment a value but use its previous value, we need the postfix form:

let counter = 0;
alert( counter++ ); // 0

---------------------------

let counter = 1;
alert( 2 * ++counter ); // 4

let counter = 1;
alert( 2 * counter++ ); // 2, because counter++ returns the "old" value

let counter = 1;
alert( 2 * counter );
counter++; // 2, because counter++ returns the "old" value

---------------------------

Bitwise operators

The list of operators:

AND ( & )
OR ( | )
XOR ( ^ )
NOT ( ~ )
LEFT SHIFT ( << )
RIGHT SHIFT ( >> )
ZERO-FILL RIGHT SHIFT ( >>> )
COMMA （，）

let a = (1 + 2, 3 + 4);
alert( a ); // 7 (Here, the first expression 1 + 2 is evaluated and its result is thrown away. Then, 3 + 4 is evaluated and returned as the result. So the result of 3 + 4)

---------------------------

let a = 1, b = 1;

let c = ++a; // ?
let d = b++; // ?

The answer is:

a = 2
b = 2
c = 2
d = 1
let a = 1, b = 1;

alert( ++a ); // 2, prefix form returns the new value
alert( b++ ); // 1, postfix form returns the old value

alert( a ); // 2, incremented once
alert( b ); // 2, incremented once

---------------------------

let a = 2;
let x = 1 + (a *= 2);

The answer is:

a = 4 (multiplied by 2)
x = 5 (calculated as 1 + 4)

---------------------------

"" + 1 + 0 = "10" // (1)
"" - 1 + 0 = -1 // (2)
true + false = 1 // true = 1; false = 0
6 / "3" = 2 // (2)
"2" * "3" = 6 // (2)
4 + 5 + "px" = "9px" // 9 + "px"
"$" + 4 + 5 = "$45"
"4" - 2 = 2 // (2)
"4px" - 2 = NaN
"  -9  " + 5 = "  -9  5" // (3)
"  -9  " - 5 = -14 // (4)
null + 1 = 1 // (5)
undefined + 1 = NaN // (6)
" \t \n" - 2 = -2 // (7)

（1）The addition with a string "" + 1 converts 1 to a string: "" + 1 = "1", and then we have "1" + 0, the same rule is applied.

（2）The subtraction - and multiply * and divide / (like most math operations) only works with numbers, it converts an empty string "" to 0.

（3）The addition with a string appends the number 5 to the string.

（4）The subtraction always converts to numbers, so it makes " -9 " a number -9 (ignoring spaces around it).

（5）null becomes 0 after the numeric conversion.

（6）undefined becomes NaN after the numeric conversion.

（7）Space characters, are trimmed off string start and end when a string is converted to a number. Here the whole string consists of space characters, such as \t, \n and a “regular” space between them. So, similarly to an empty string, it becomes 0.
